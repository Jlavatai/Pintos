            +-------------------+
            |       OS 211      |
            |  TASK 1: THREADS  |
            |  DESIGN DOCUMENT  |
            +-------------------+
                   
---- GROUP ----

>> Fill in the names and email addresses of your group members.

Francesco Di Mauro <fd1011@imperial.ac.uk>
Thomas Rooney <tr111@imperial.ac.uk>
Alex Rozanski <anr11@imperial.ac.uk>

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

                 ALARM CLOCK
                 ===========

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

Added to enum thread_status:

THREAD_SLEEP        /* Sleeping thread. */

Added to struct thread:

long long wakeup_tick;              /* If sleeping, the tick we want to wake up on. */

Added to thread.c:

/* List of processes currently sleeping. Processes in this list 
   have state set to THREAD_SLEEP. Each timer interrupt, this
   is decremented until it reaches 0, upon which they are taken 
   out of the sleeping list. */
static struct list sleeping_list;

static long long current_tick = 0;  /* # of timer ticks we've been running for so far. */

---- ALGORITHMS ----

>> A2: Briefly describe what happens in a call to timer_sleep(),
>> including the effects of the timer interrupt handler.

timer_sleep() calls out to a new method we implemented, thread_sleep().
This adds the current thread to a list of sleeping threads which we maintain.

>> A3: What steps are taken to minimize the amount of time spent in
>> the timer interrupt handler?

The list of sleeping threads we maintain is ordered by the wakeup_tick member
which we added to struct thread. This is an absolute tick value that the thread 
should sleep until, which is set when timer_sleep() is invoked. When we iterate
over the sleeping threads in thread_sleep_ticker() (which is called from the
timer interrupt handler) we can stop iteration once we hit a thread whose
wakeup_tick value is later than the current tick we're on, because of this ordering.

Furthermore, because the tick which we want the thread to wake up on is stored as
an absolute value rather than a relative number of ticks to sleep for, we don't
need to update any sleep state in the timer interrupt handler for the sleeping
threads.

We have added an extra global variable in thread.c, current_tick, which maintains
the number of ticks that pintos has been running for. This allows us to make the
absolute tick value comparison with sleeping threads, to determine whether they need
to be woken up. The value of current_tick is equivalent to the combined values of
idle_ticks, kernel_ticks and user_ticks. However, incrementing current_tick by one
in the timer interrupt handler requires only one add operation, rather than the
two add operations it would require to sum the three tick values to generate an
absolute tick value, which minimises time spent in the interrupt handler.

---- SYNCHRONIZATION ----

>> A4: How are race conditions avoided when multiple threads call
>> timer_sleep() simultaneously?

>> A5: How are race conditions avoided when a timer interrupt occurs
>> during a call to timer_sleep()?

---- RATIONALE ----

>> A6: Why did you choose this design?  In what ways is it superior to
>> another design you considered?

We chose this design because it does a fairly low amount of processing in the
timer interrupt handler. As this is called every tick, this is important. Our
initial design used an unordered list of sleeping threads, and each thread
stored the number of ticks to sleep for. In the timer interrupt handler we
would decrement the number of ticks each thread in the sleeping queue was
sleeping for, and then wake up the thread when this count hit zero. This was
really inefficient because we were not just iterating over every sleeping
thread at every tick, but we were also modifying the state of every thread
at every tick.

             PRIORITY SCHEDULING
             ===================

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

>> B2: Explain the data structure used to track priority donation.
>> Use ASCII art to diagram a nested donation.  (Alternately, submit a
>> .png file.)

---- ALGORITHMS ----

>> B3: How do you ensure that the highest priority thread waiting for
>> a lock, semaphore, or condition variable wakes up first?

>> B4: Describe the sequence of events when a call to lock_acquire()
>> causes a priority donation.  How is nested donation handled?

>> B5: Describe the sequence of events when lock_release() is called
>> on a lock that a higher-priority thread is waiting for.

---- SYNCHRONIZATION ----

>> B6: Describe a potential race in thread_set_priority() and explain
>> how your implementation avoids it.  Can you use a lock to avoid
>> this race?

---- RATIONALE ----

>> B7: Why did you choose this design?  In what ways is it superior to
>> another design you considered?

              ADVANCED SCHEDULER
              ==================

---- DATA STRUCTURES ----

>> C1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

---- ALGORITHMS ----

>> C2: Suppose threads A, B, and C have nice values 0, 1, and 2.  Each
>> has a recent_cpu value of 0.  Fill in the table below showing the
>> scheduling decision and the priority and recent_cpu values for each
>> thread after each given number of timer ticks:

timer  recent_cpu    priority   thread
ticks   A   B   C   A   B   C   to run
-----  --  --  --  --  --  --   ------
 0
 4
 8
12
16
20
24
28
32
36

>> C3: Did any ambiguities in the scheduler specification make values
>> in the table uncertain?  If so, what rule did you use to resolve
>> them?  Does this match the behaviour of your scheduler?

>> C4: How is the way you divided the cost of scheduling between code
>> inside and outside interrupt context likely to affect performance?

---- RATIONALE ----

>> C5: Briefly critique your design, pointing out advantages and
>> disadvantages in your design choices.  If you were to have extra
>> time to work on this part of the task, how might you choose to
>> refine or improve your design?

>> C6: The assignment explains arithmetic for fixed-point mathematics in
>> detail, but it leaves it open to you to implement it.  Why did you
>> decide to implement it the way you did?  If you created an
>> abstraction layer for fixed-point mathematics, that is, an abstract
>> data type and/or a set of functions or macros to manipulate
>> fixed-point numbers, why did you do so?  If not, why not?

               SURVEY QUESTIONS
               ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining tasks?

>> Any other comments?
